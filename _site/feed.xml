<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Full-stack developer William Vit</title>
    <description></description>
    <link>https://williamvittso.github.io//</link>
    <atom:link href="https://williamvittso.github.io//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 31 Aug 2017 14:16:22 +0800</pubDate>
    <lastBuildDate>Thu, 31 Aug 2017 14:16:22 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>How to do a redirect to another route programmatically with react Router v4</title>
        <description>&lt;h3 id=&quot;how-to-do-a-redirect-to-another-route-programmatically-with-react-router-v4&quot;&gt;How to do a redirect to another route programmatically with react-router v4.&lt;/h3&gt;

&lt;h4 id=&quot;headerjs&quot;&gt;Header.js&lt;/h4&gt;
&lt;p&gt;#### first of all just import withRouter, with this,You can get access to the history object’s properties and the closest &lt;Route&gt;&#39;s match via the withRouter higher-order component. withRouter will re-render its component every time the route changes with the same props as &lt;Route&gt; render props: { match, location, history }.&lt;/Route&gt;&lt;/Route&gt;&lt;/p&gt;

&lt;p&gt;``` js
// ….
import { withRouter } from ‘react-router’&lt;/p&gt;

&lt;p&gt;class Header extends Component {
  functionMethod() {
    // then push you path into history.
    this.props.history.push( “/path”);
  }
  // …
}&lt;/p&gt;

&lt;p&gt;// export component by invoke withRouter.
export default withRouter(Header);
```&lt;/p&gt;

&lt;h4 id=&quot;and-for-navigator-which-normally-used-as-public-component-and-it-not-rendered-by-routeroute-you-need-use-createbrowserhistory-to-create-history-object-for-it-consider-following-example&quot;&gt;And for Navigator which normally used as public component and it not rendered by &lt;Route&gt;&lt;/Route&gt; you need use createBrowserHistory to create history object for it. Consider following example.&lt;/h4&gt;

&lt;p&gt;``` js
//Routers.js&lt;/p&gt;

&lt;p&gt;import { createBrowserHistory } from ‘history’;
// import createBrowserHistory to create react history object for header component
const history = createBrowserHistory();
// …
class Routers extends Component{
  render(){
    return (&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;BrowserRouter  basename=&quot;/platform&quot;&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;Header history={history}&amp;gt;&amp;lt;/Header&amp;gt;
    // set history as Header.js&#39;s props without createBrowserHistory you will not able to access history here.

    &amp;lt;Switch&amp;gt;
        &amp;lt;Route
            path={&quot;/bom&quot;}
            children={({history}) =&amp;gt; (
              &amp;lt;Bom history={history}&amp;gt;&amp;lt;/Bom&amp;gt;
            )}
        &amp;gt;
        &amp;lt;/Route&amp;gt;
        // ....
        &amp;lt;/Switch&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/BrowserRouter&amp;gt;
)   } } // ... export default Routers;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;```&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Aug 2017 00:00:00 +0800</pubDate>
        <link>https://williamvittso.github.io//2017/How%20to%20do%20a%20redirect%20to%20another%20route%20programmatically%20with%20react-router%20v4/</link>
        <guid isPermaLink="true">https://williamvittso.github.io//2017/How%20to%20do%20a%20redirect%20to%20another%20route%20programmatically%20with%20react-router%20v4/</guid>
        
        
      </item>
    
      <item>
        <title>Set Welcom Info For Centos</title>
        <description>&lt;h3 id=&quot;set-welcom-info-for-centos&quot;&gt;set Welcom info for centos&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;bash
$ vim /etc/motd
&lt;/code&gt;
input something use full such as where is your application directory is.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 May 2017 00:00:00 +0800</pubDate>
        <link>https://williamvittso.github.io//2017/set-Welcom-info-for-CentOS/</link>
        <guid isPermaLink="true">https://williamvittso.github.io//2017/set-Welcom-info-for-CentOS/</guid>
        
        
      </item>
    
      <item>
        <title>Set Existsing Folder Point To Remote Git</title>
        <description>&lt;h1 id=&quot;set-existsing-folder-point-to-remote-git&quot;&gt;set-existsing-folder-point-to-remote-git&lt;/h1&gt;

&lt;p&gt;``` bash
1. $ git init&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;$ git remote add origin https://github.com/xxx/xxx.git&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ git branch –set-upstream-to=origin/&lt;branch&gt; master&lt;/branch&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;$ git pull –allow-unrelated-histories
```
&lt;strong&gt;watch out&lt;/strong&gt; here’s needs https:// not ssh, in case you don’t have the SSH keys. but you can also use ssh if you’d prefer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my case, error was just &lt;code&gt;fatal: refusing to merge unrelated histories&lt;/code&gt; on every especially first pull request after remotely adding a git repo.
Using &lt;code&gt;--allow-unrelated-histories&lt;/code&gt; flag worked with pull request in this way&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://williamvittso.github.io//2017/set-existsing-folder-point-to-remote-git/</link>
        <guid isPermaLink="true">https://williamvittso.github.io//2017/set-existsing-folder-point-to-remote-git/</guid>
        
        
      </item>
    
      <item>
        <title>Use Nodejs Server To Serve &amp; Test React App On Centos 6</title>
        <description>&lt;p&gt;https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/
https://expressjs.com/en/starter/installing.html&lt;/p&gt;

&lt;h3 id=&quot;download-nodejs&quot;&gt;1. Download Node.js&lt;/h3&gt;

&lt;p&gt;You will want to download the latest stable version of Node.js, which can be done by running the command below. It runs a script that automatically steps you through the installation process. The script is downloaded directly from Joylent (the makers of Node.js) at their NodeSource repository.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;{r, engine=&#39;&#39;, count_lines}
 cd /tmp  
 curl -sL https://rpm.nodesource.com/setup | bash -
&lt;/code&gt;
notice here need update url flowing the instruction.&lt;/p&gt;

&lt;h3 id=&quot;install-nodejs&quot;&gt;2. Install Node.js&lt;/h3&gt;

&lt;p&gt;Once the script detects that you do not have Node.js installed, enter the following command to begin the install via the yum package manager.&lt;/p&gt;

&lt;p&gt;yum install -y nodejs&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://williamvittso.github.io//2017/use-nodejs-server-to-serve-&-test-react-app-on-centos-6/</link>
        <guid isPermaLink="true">https://williamvittso.github.io//2017/use-nodejs-server-to-serve-&-test-react-app-on-centos-6/</guid>
        
        
      </item>
    
  </channel>
</rss>
