<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-02T20:40:51+08:00</updated><id>http://localhost:4000/</id><title type="html">William Vit</title><subtitle>All about web development</subtitle><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><entry><title type="html">Replace Url Prameter By Js</title><link href="http://localhost:4000/replace-url-prameter-by-js/" rel="alternate" type="text/html" title="Replace Url Prameter By Js" /><published>2017-09-02T00:00:00+08:00</published><updated>2017-09-02T00:00:00+08:00</updated><id>http://localhost:4000/replace-url-prameter-by-js</id><content type="html" xml:base="http://localhost:4000/replace-url-prameter-by-js/">```js
var url  = 'www.something.com?some_parameter_name=old_parameter_value&amp;';

var parameter_name = 'name=';
var url_regex = new RegExp(parameter_name + '[^&amp;]+' + '&amp;');
var old_par = url_regex.exec(url);
var = new_par = 'new_parameter_name=new_parameter_value';
url = url.replace(old_par,new_par);

// chop/slice/trim off last character(&amp; symbol) in string for possibly  use.

var str = &quot;12345.00&quot;;
str = str.substring(0, str.length - 1);
// but the slice syntax is much clearer
var str = &quot;12345.00&quot;;
str = str.slice(0, -1);
```</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /><summary type="html">replace url prameter by js</summary></entry><entry><title type="html">Ciss React Standard Style</title><link href="http://localhost:4000/CISS-React-Standard-Style/" rel="alternate" type="text/html" title="Ciss React Standard Style" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>http://localhost:4000/CISS-React-Standard-Style</id><content type="html" xml:base="http://localhost:4000/CISS-React-Standard-Style/"># React Style Guide

# jQuery

* __In general, avoid using jQuery within React components.__
* __Never use jQuery in a component for DOM manipulation.__
* __Performing ajax with jQuery in your component is fine.__
* __If you're using a jQuery plugin, consider encapsulating the use of the plugin in its own component so that you only have to manage it in a single place.__


* __尽量避免在React组件中使用jQuery。__
* __绝不在组件中使用jQuery进行DOM操作。__
* __执行 ajax与jQuery在你的组件是允许的.__
* __如果您正在使用jQuery插件，请考虑将插件的使用封装在自己的组件中，以便只需在单个位置进行管理。__

#### Sources
Based on the styles recommended from:    
__根据以下推荐的风格编辑：__
1. https://github.com/Khan/style-guides/blob/master/style/react.md
2. https://reactjsnews.com/react-style-guide-patterns-i-like/
3. [React.js Training](https://reactjs-training.com/) by [Ryan Florence](https://twitter.com/ryanflorence) and [Michael Jackson](https://twitter.com/mjackson)


# Classes

* Component class names should always begin with an upper case character. React expects elements starting with a lower case character to be built-in HTML elements and will throw an error if your component starts with one.  
__组件类名应始终以大写字母开头。
React希望以小写字符开头的元素是内置的HTML元素，如果您的组件以一个小写字母开头，则会抛出错误。__

    ```js
    // Bad
    var myComponent = React.createClass({ /* ... */ });

    // Good
    var MyComponent = React.createClass({ /* ... */ });
    ```

* Members should be in the following order:
    1. Lifecycle methods in order of occurrence
    2. Implementation methods
    3. `render`


* __定义方法的顺序如下__
  1. __constructor__
  2. __内置生命周期方法__
  3. __自定义方法__
  4. __`render`__

    ```js
    const Foo = React.createClass({                
        componentWillMount: function () {},
        componentWillUnmount: function () {},
        _handleButtonClick: function () {},
        _myMethod: function () {},
        render: function () {}
    });
    ```

* The `render` method should always be last - this way you can easily find it by scrolling to the bottom of the file.  
* __`render`方法应该是最后一个 - 这样你可以通过滚动到文件的底部轻松的找到它。__

* Prefix custom methods and event handlers with an underscore.
* __使用下划线修饰自定义方法和事件处理程序。__
`_handleButtonClick: function () {},`

* Event handlers should be named `_handle{EventName}`. Props that pass event handlers should be named `on{EventName}`.
* __自定义事件处理程序应该被命名为`_handle{EventName}`。 传递事件处理程序的 props 应该命名为“on{EventName}”。例如：__

    ```js
    _handleButtonClick: function (e) { /* ... */ }
    ```

    ```js
    &lt;Foo onButtonClick={this._handleButtonClick} /&gt;
    ```

* The element returned by the `render` method should have a `className` matching the name of the component (or otherwise identifying the component). This is useful for &quot;namespacing&quot; any CSS/LESS that go with the component. For example:
* __`render`方法返回的元素应该有一个`类名`匹配组件的名称（或以其他方式标识组件）。 对任何使用CSS/LESS“命名空间”的组件是有用的。 例如：__

    ```js
    // Foobar.js
    import React from 'react';
    import 'Foobar.less';

    const Foobar = React.createClass({
        render: function () {
            return &lt;div className=&quot;foobar&quot;&gt;
                Foobar
            &lt;/div&gt;;
        }
    });

    export default Foobar;
    ```

    ```less
    // Foobar.less
    .foobar {
        // Rules defined here will only apply to Foobar elements
    }
    ```

# JSX

* Align props when you can't fit them all on a single line. The ending &quot;&gt;&quot; of the opening tag should go on its own line. This makes it clearly visible where the opening tag ends and the element's children begin.
* __当您无法将其全部放在一行上时，将props对齐。 开始标签的结尾“&gt;”应该另起一行。 以便分辨开始标签和子元素。__
    ```js
    // Bad
    &lt;div className=&quot;foo-container&quot;
        data-bar=&quot;some value&quot;&gt;
        { /* ... */ }
    &lt;/div&gt;

    // Good
    &lt;div className=&quot;foo-container&quot; data-bar=&quot;some value&quot;&gt;
        { /* ... */ }
    &lt;/div&gt;

    // Good
    &lt;div
        className=&quot;foo-container&quot;
        data-bar=&quot;some value&quot;
    &gt;
        { /* ... */ }
    &lt;/div&gt;
    ```

* Open elements that span multiple lines on the same line. This conserves space because it requires one fewer tab and also saves a couple of lines.
* __打开同一行上跨多行的元素。 这节省了空间，因为它需要更少的缩进。__
    ```js
    // OK...
    var multilineJsx = (
        &lt;div&gt;
            { /* ... */ }
        &lt;/div&gt;
    );

    // Better
    var multilineJsx = &lt;div&gt;
        { /* ... */ }
    &lt;/div&gt;;

    // Better
    var multilineJsx = &lt;div
        className=&quot;really very long class&quot;
        id=&quot;reallyReallyReallyLongId&quot;
        data-foo=&quot;some important value&quot;
    &gt;
        { /* ... */ }
    &lt;/div&gt;;
    ```

* Variables holding a JSX object can stay on one line if it is short enough.
* __变量可以保持JSX元素在一行内。__

    ```js
    var singleLineJsx = &lt;h1&gt;My header&lt;/h1&gt;;
    ```

* When rendering a list of components from an array, do it inline if it makes sense. If the map function is too long or complicated, consider extracting it out into its own method on the component class.
* __当从数组中渲染列表时将其内联。 如果 map 函数太长或复杂，请考虑将其提取为独立组件。__

    ```js
    &lt;ul&gt;
        {items.map(function (item, i) {
            return &lt;li key={i}&gt;{item}&lt;/li&gt;;
        )}
    &lt;/ul&gt;;

    // or with ES6

    &lt;ul&gt;
        {items.map((item, i) =&gt; &lt;li key={i}&gt;{item}&lt;/li&gt;)}
    &lt;/ul&gt;;
    ```</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">Ciss Javascript Standard Style</title><link href="http://localhost:4000/CISS-JavaScript-Standard-Style/" rel="alternate" type="text/html" title="Ciss Javascript Standard Style" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>http://localhost:4000/CISS-JavaScript-Standard-Style</id><content type="html" xml:base="http://localhost:4000/CISS-JavaScript-Standard-Style/">&lt;h1 id=&quot;javascript-standard-style&quot;&gt;JavaScript Standard Style&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/feross/standard&quot;&gt;&lt;img src=&quot;https://cdn.rawgit.com/feross/standard/master/badge.svg&quot; alt=&quot;js-standard-style&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a TL;DR of the &lt;a href=&quot;https://github.com/feross/standard&quot;&gt;standard&lt;/a&gt; JavaScript
rules.&lt;/p&gt;

&lt;p&gt;The best way to learn about &lt;code class=&quot;highlighter-rouge&quot;&gt;standard&lt;/code&gt; is to just install it and give it a try on
your code.&lt;/p&gt;

&lt;p&gt;这是 JavaScript standard 代码规范的全文。&lt;/p&gt;

&lt;p&gt;掌握本规范的最好方法是安装并在自己的代码中使用它。&lt;/p&gt;

&lt;h2 id=&quot;rules-细则&quot;&gt;Rules 细则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use 2 spaces&lt;/strong&gt; for indentation. 使用两个空格进行缩进。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Use single quotes for strings&lt;/strong&gt; except to avoid escaping. 除需要转义的情况外，字符串统一使用单引号。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello there'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;div class='box'&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;No unused variables.不要定义未使用的变量。&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Add a space after keywords.关键字后面加空格。&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Add a space before a function declaration’s parentheses.函数声明时括号与函数名间加空格。&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Always use&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;==&lt;/code&gt;.&lt;br /&gt;
Exception: &lt;code class=&quot;highlighter-rouge&quot;&gt;obj == null&lt;/code&gt; is allowed to check for &lt;code class=&quot;highlighter-rouge&quot;&gt;null || undefined&lt;/code&gt;.&lt;br /&gt;
始终使用 === 替代 ==。
例外： obj == null 可以用来检查 null || undefined。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'John'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Infix operators&lt;/strong&gt; must be spaced.&lt;br /&gt;
字符串拼接操作符 (Infix operators) 之间要留空格。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello, '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello, '&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'!'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Commas should have a space&lt;/strong&gt; after them.&lt;br /&gt;
逗号后面加空格。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;greet&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Keep else statements&lt;/strong&gt; on the same line as their curly braces.&lt;br /&gt;
else 关键字要与花括号保持在同一行。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;condition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For multi-line if statements,&lt;/strong&gt; use curly braces.&lt;br /&gt;
多行 if 语句的的括号不能省。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quiet&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Always handle the&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;err&lt;/code&gt; function parameter.&lt;br /&gt;
不要丢掉异常处理中err参数。
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'done'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Declare browser globals&lt;/strong&gt; with a &lt;code class=&quot;highlighter-rouge&quot;&gt;/* global */&lt;/code&gt; comment.&lt;br /&gt;
Exceptions are: &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;.&lt;br /&gt;
Prevents accidental use of poorly-named browser globals like &lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;br /&gt;
声明全局对象时用/* global */注释。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;document&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;navigator&lt;/code&gt;除外。&lt;br /&gt;
不使用名称不正确的浏览器全局对象，&lt;code class=&quot;highlighter-rouge&quot;&gt;open&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;length&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;event&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;.
如下所示：&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/* global alert, prompt */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Explicitly referencing the function or property on &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt; is okay too, though
such code will not run in a Worker which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;self&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;.&lt;br /&gt;
使用浏览器全局变量时加上 window. 前缀。如果代码不在浏览器中工作则用self 代替。&lt;/p&gt;
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multiple blank lines not allowed.不允许有连续多行空行。&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For the ternary operator&lt;/strong&gt; in a multi-line setting, place &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; on their own lines.&lt;br /&gt;
对于三元运算符 ? 和 : 与他们所负责的代码处于同一行&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;development&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'www.api.com'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;development&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'www.api.com'&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;development&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'www.api.com'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;For var declarations,&lt;/strong&gt; write each declaration in its own statement.&lt;br /&gt;
每个 var 关键字单独声明一个变量。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;silent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;silent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;silent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;verbose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wrap conditional assignments&lt;/strong&gt; with additional parentheses. This makes it clear that the expression is intentionally an assignment (&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt;) rather than a typo for equality (&lt;code class=&quot;highlighter-rouge&quot;&gt;===&lt;/code&gt;).&lt;br /&gt;
条件语句中赋值语句使用括号包起来。这样使得代码更加清晰可读，而不会认为是将条件判断语句的全等号（===）错写成了等号（=）。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;单行代码块两边加空格。&lt;/p&gt;

    &lt;p&gt;eslint: block-spacing&lt;/p&gt;

    &lt;p&gt;function foo () {return true}    // ✗ avoid
  function foo () { return true }  // ✓ ok&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;/p&gt;
&lt;h2 id=&quot;semicolons&quot;&gt;Semicolons&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;No semicolons. (see: &lt;a href=&quot;http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://inimino.org/%7Einimino/blog/javascript_semicolons&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=gsfbh17Ax9I&quot;&gt;3&lt;/a&gt;)
不要使用分号
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hi'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Never start a line with &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt;. This is the only gotcha with omitting semicolons, and standard protects you from this potential issue.
不使用分号的项目中，不要以&lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;`&lt;/code&gt; 开头。而用分号开头
    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}())&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ok'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ✓ ok&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ✗ avoid&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;Note: If you’re often writing code like this, you may be trying to be too clever.&lt;/p&gt;

    &lt;p&gt;Clever short-hands are discouraged, in favor of clear and readable expressions, whenever
possible.
不鼓励使用短遍历因为会削弱可读性&lt;/p&gt;

    &lt;p&gt;Instead of this:&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;This is much preferred:
这种遍历方式更值得鼓励。&lt;/p&gt;

    &lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;helpful-reading-拓展阅读&quot;&gt;Helpful reading 拓展阅读&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding&quot;&gt;An Open Letter to JavaScript Leaders Regarding Semicolons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://inimino.org/~inimino/blog/javascript_semicolons&quot;&gt;JavaScript Semicolon Insertion – Everything you need to know&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;and-a-helpful-video一个值得观看的视频&quot;&gt;And a helpful video:一个值得观看的视频：&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=gsfbh17Ax9I&quot;&gt;Are Semicolons Necessary in JavaScript? - YouTube&lt;/a&gt;
JavaScript 中的分号多余吗？- YouTube&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All popular code minifiers in use today use AST-based minification, so they can
handle semicolon-less JavaScript with no issues (since semicolons are not required
in JavaScript).&lt;/p&gt;

&lt;h5 id=&quot;excerpt-from-an-open-letter-to-javascript-leaders-regarding-semicolons&quot;&gt;Excerpt from &lt;em&gt;&lt;a href=&quot;http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding&quot;&gt;“An Open Letter to JavaScript Leaders Regarding Semicolons”&lt;/a&gt;&lt;/em&gt;:&lt;/h5&gt;

&lt;p&gt;[Relying on automatic semicolon insertion] is quite safe, and perfectly valid JS that every browser understands. Closure compiler, yuicompressor, packer, and jsmin all can properly minify it. There is no performance impact anywhere.&lt;/p&gt;

&lt;p&gt;I am sorry that, instead of educating you, the leaders in this language community have given you lies and fear.  That was shameful. I recommend learning how statements in JS are actually terminated (and in which cases they are not terminated), so that you can write code that you find beautiful.&lt;/p&gt;

&lt;p&gt;In general, &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; ends a statement unless:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The statement has an unclosed paren, array literal, or object literal or ends in some
other way that is not a valid way to end a statement. (For instance, ending with &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;.)&lt;/li&gt;
  &lt;li&gt;The line is &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;++&lt;/code&gt; (in which case it will decrement/increment the next token.)&lt;/li&gt;
  &lt;li&gt;It is a &lt;code class=&quot;highlighter-rouge&quot;&gt;for()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;while()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;do&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;if()&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;else&lt;/code&gt;, and there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;The next line starts with &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.&lt;/code&gt;, or some other
binary operator that can only be found between two tokens in a single expression.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first is pretty obvious. Even JSLint is ok with &lt;code class=&quot;highlighter-rouge&quot;&gt;\n&lt;/code&gt; chars in JSON and parenthesized constructs, and with &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; statements that span multiple lines ending in &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second is super weird. I’ve never seen a case (outside of these sorts of conversations) where you’d want to do write &lt;code class=&quot;highlighter-rouge&quot;&gt;i\n++\nj&lt;/code&gt;, but, point of fact, that’s parsed as &lt;code class=&quot;highlighter-rouge&quot;&gt;i; ++j&lt;/code&gt;, not &lt;code class=&quot;highlighter-rouge&quot;&gt;i++; j&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The third is well understood, if generally despised. &lt;code class=&quot;highlighter-rouge&quot;&gt;if (x)\ny()&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;if (x) { y() }&lt;/code&gt;. The construct doesn’t end until it reaches either a block, or a statement.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; is a valid JavaScript statement, so &lt;code class=&quot;highlighter-rouge&quot;&gt;if(x);&lt;/code&gt; is equivalent to &lt;code class=&quot;highlighter-rouge&quot;&gt;if(x){}&lt;/code&gt; or, “If x, do nothing.” This is more commonly applied to loops where the loop check also is the update function. Unusual, but not unheard of.&lt;/p&gt;

&lt;p&gt;The fourth is generally the fud-inducing “oh noes, you need semicolons!” case. But, as it turns out, it’s quite easy to &lt;em&gt;prefix&lt;/em&gt; those lines with semicolons if you don’t mean them to be continuations of the previous line. For example, instead of this:
当前主流的代码压缩方案都是基于词法（AST-based）进行的，所以在处理无分号的代码时完全没有压力（何况 JavaScript 中分号本来就不是强制的）。&lt;/p&gt;

&lt;p&gt;一段摘抄自 “An Open Letter to JavaScript Leaders Regarding Semicolons” 这篇文章的内容：&lt;/p&gt;

&lt;p&gt;[自动化插入分号的做法]是安全可依赖的，而且其产出的代码能够在所有浏览器里很好地运行。 Closure compiler, yuicompressor, packer 还有 jsmin 都能正确地对这样的代码进行压缩处理。并没有任何性能相关的问题。&lt;/p&gt;

&lt;p&gt;不得不说，Javascript 社区里的大牛们一直是错误的，并不能教给你最佳实践。真是让人忧伤啊。 我建议先弄清楚 JS 是怎样断句的（还有就是哪些地方看起来断了其实并没有），明白了这个后就可以随心写出漂亮的代码了。&lt;/p&gt;

&lt;p&gt;一般来说， \n 表示语句结束，除非：&lt;/p&gt;

&lt;p&gt;该语句有未闭合的括号， 数组字面量， 对象字面量 或者其他不能正常结束一条语句的情况（譬如，以 . 或 , 结尾）
该语句是 – 或者 ++ （它会将后面的内容进行自增或减）
该语句是 for()，while()，do，if() 或者 else 并且没有 {
下一行以 [，(，+，*，/，-，,，. 或者其他只会单独出现在两块内容间的二元操作符。
第一条很容易理解。即使在 JSLint 中，也允许 JSON，构造器的括号中，以及使用 var 配合 , 结尾来声明多个变量等这些情中包含 \n。&lt;/p&gt;

&lt;p&gt;第二条有点奇葩。 我还想不出谁会（除了这里用作讨论外）写出 i\n++\nj 这样的代码来，不过，顺便说一下，这种写法最后解析的结果是 i; ++j，而不是 i++; j。&lt;/p&gt;

&lt;p&gt;第三条也容易理解。 if (x)\ny() 等价于 if (x) { y() }。解释器会向下寻找到代码块或一条语句为止。&lt;/p&gt;

&lt;p&gt;; 是条合法的 JavaScript 语句。所以 if(x); 等价于 if(x){}，表示 “如果 x 为真，什么也不做。” 这种写法在循环里面可以看到，就是当条件判断与条件更新是同一个方法的时候。 不常见，但也不至于没听说过吧。&lt;/p&gt;

&lt;p&gt;第四条就是常见的 “看，说过要加分号！” 的情形。但这些情况可以通过在语句前面加上分号来解决，如果你确定该语句跟前面的没关系的话。举个例子，假如你想这样：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;you could do this:&lt;br /&gt;
那么完全可以这样来写：&lt;/p&gt;
&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The advantage is that the prefixes are easier to notice, once you are accustomed to never seeing lines starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt; without semis.&lt;br /&gt;
后者的好处是分号比较瞩目，一旦习惯后便再也不会看到以 ( 和 [ 开头又不带分号的语句了。&lt;/p&gt;

&lt;p&gt;&lt;em&gt;End quote from “An Open Letter to JavaScript Leaders Regarding Semicolons”.&lt;/em&gt;&lt;/p&gt;</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">Ciss Html Standard Style</title><link href="http://localhost:4000/CISS-HTML-Standard-Style/" rel="alternate" type="text/html" title="Ciss Html Standard Style" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>http://localhost:4000/CISS-HTML-Standard-Style</id><content type="html" xml:base="http://localhost:4000/CISS-HTML-Standard-Style/">### Doctype

Always use the minimal, versionless doctype.
```html
&lt;!doctype html&gt;
```

### Encoding

Always define the character encoding. The encoding should be defined as early as possible. Make sure your editor uses UTF-8 as character encoding, without a byte order mark (UTF-8, no BOM). Do not specify the encoding of style sheets as these assume UTF-8.
```html
&lt;meta charset=&quot;utf-8&quot;&gt;
```
More on encodings and when and how to specify them can be found in Handling character encodings in HTML and CSS

### Capitalisation

All html should be lowercase; element names, attributes, attribute values (unless text/CDATA), CSS selectors, properties, and property values (with the exception of strings). Additionally, there is no need to use CDATA to escape inline JavaScript, formerly a requirement to meet XML strictness in XHTML.

所有html应该是小写的;元素名称，属性，属性值（除非是文本/ CDATA），CSS选择器，属性和属性值（字符串除外）。此外，不需要使用CDATA来转义内联JavaScript，以前是在XHTML中满足XML严格性的要求。
```html
&lt;!-- Good --&gt;
&lt;img src=&quot;CISS.png&quot; alt=&quot;CISS&quot;&gt;

&lt;!-- Bad --&gt;
&lt;A HREF=&quot;/&quot;&gt;Home&lt;/A&gt;
&lt;!-- Good --&gt;
a {
    color: #a3a3a3;
}

&lt;!-- Bad --&gt;
a {
    color: #A3A3A3;
}
```

### Protocol

Omit the protocol portion (http:, https:) from URLs pointing to images and other media files, style sheets, and scripts unless they are not available over both protocols.

This prevents mixed content issues and results in minor file size savings.

__指向图像和其他媒体文件，样式表和脚本的URL中省略协议部分（http :, https :)，除非这两个协议都不可用__

这可以防止混合内容问题，从而节省较小的文件大小。
```html
&lt;!-- Good --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;//CISS.org/css/main.css&quot;&gt;

&lt;!-- Bad --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;http://CISS.org/css/main.css&quot;&gt;
Elements and Attributes
```

Always include html, head, and body tags.

Type attributes

Do not use type or attributes for style sheets (unless not using CSS) and scripts (unless not using JavaScript).

不要使用样式表的类型或属性（除非不使用CSS）和脚本（除非不使用JavaScript）。
```html
&lt;!-- Good --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;//CISS.org/css/main.css&quot;&gt;

&lt;!-- Bad --&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;//CISS.org/css/main.css&quot; type=&quot;text/css&quot;&gt;
```

Language attributes
Do not use language attributes on script tags.
不要在script标签上使用语言属性。
```html
&lt;!-- Good --&gt;
&lt;script href=&quot;//code.jquery.com/jquery-latest.js&quot;&gt;

&lt;!-- Bad --&gt;
&lt;script href=&quot;//code.jquery.com/jquery-latest.js&quot; language=&quot;javascript&quot;&gt;
```

Attributes

Attribute values should be quoted using double (&quot;&quot;) quotes. Optional attributes should be omitted.  
应使用双引号（“”）引用属性值。可选属性应该省略

```html
&lt;!-- Good --&gt;
&lt;script src=&quot;//code.jquery.com/jquery-latest.js&quot;&gt;&lt;/script&gt;
&lt;!-- Bad --&gt;
&lt;script src='//code.jquery.com/jquery-latest.js'&gt;&lt;/script&gt;
Use attribute/value pairs for boolean attributes

&lt;!-- Good --&gt;
&lt;input type=&quot;checkbox&quot; value=&quot;on&quot; checked=&quot;checked&quot;&gt;
&lt;!-- Bad --&gt;
&lt;input type=&quot;checkbox&quot; value=&quot;on&quot; checked&gt;
```

HTML attributes should be listed in an order that reflects the fact that class names are the primary interface through which CSS and JavaScript select elements.
按如下顺序书写属性
class
id
data-*
Everything else

```html
&lt;!-- Good --&gt;
&lt;a class=&quot;[some-value]&quot; id=&quot;[some-value]&quot; data-name=&quot;[some-value]&quot; href=&quot;[some-value]&quot;&gt;Text&lt;/a&gt;
&lt;!-- Bad --&gt;
&lt;a href=&quot;[some-value]&quot; class=&quot;[some-value]&quot; id=&quot;[some-value]&quot; data-name=&quot;[some-value]&quot;&gt;Text&lt;/a&gt;
```

Elements with multiple attributes can have attributes arranged across multiple lines in an effort to improve readability and produce more useful diffs:
具有多个属性的元素可以跨多行排列属性，以提高可读性：
```html
&lt;a class=&quot;[some-value]&quot;
 data-action=&quot;[some-value]&quot;
 data-id=&quot;[some-value]&quot;
 href=&quot;[some-value]&quot;&gt;
    &lt;span&gt;Text&lt;/span&gt;
&lt;/a&gt;
```

Elements

Optional closing tags may not be omitted.
所有标签必须关闭
```html
&lt;!-- Good --&gt;
&lt;p&gt;The quick brown fox jumps over the lazy dog.&lt;/p&gt;
&lt;!-- Bad --&gt;
&lt;p&gt;The quick brown fox jumps over the lazy dog.
Self-closing (void) elements should not be closed. Trailing forward slashes and spaces should be omitted.

&lt;!-- Good --&gt;
&lt;img src=&quot;//images/logo.png&quot; alt=&quot;&quot;&gt;
&lt;!-- Bad --&gt;
&lt;img src=&quot;//images/logo.png&quot; alt=&quot;&quot; /&gt;
```

Formatting

Use a new line for every block, list, or table element, and indent every such child element.
对每个块，列表或表格元素使用新行，并缩进每个这样的子元素。

```html
&lt;!-- Good --&gt;
&lt;div&gt;
	&lt;ul&gt;
	  &lt;li&gt;Home&lt;/li&gt;
	  &lt;li&gt;Blog&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;

&lt;!-- Bad --&gt;
&lt;div&gt;&lt;ul&gt;
  &lt;li&gt;Home&lt;/li&gt;
  &lt;li&gt;Blog&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
```

使用2行空行分隔html块，消除末尾空隔
```html
&lt;blockquote&gt;
    &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;ul&gt;
    &lt;li&gt;Moe&lt;/li&gt;
    &lt;li&gt;Larry&lt;/li&gt;
    &lt;li&gt;Curly&lt;/li&gt;
&lt;/ul&gt;


&lt;table&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th scope=&quot;col&quot;&gt;Income&lt;/th&gt;
            &lt;th scope=&quot;col&quot;&gt;Taxes&lt;/th&gt;
        &lt;/tr&gt;
    &lt;tbody&gt;
    &lt;tr&gt;
        &lt;td&gt;$ 5.00&lt;/td&gt;
        &lt;td&gt;$ 4.50&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
```

Indentation

Don't indent inside html, body, script, or style. Indent inside head and all other elements. Indent by four spaces at a time. Don’t use tabs or mix tabs and spaces for indentation.

不要在html，body，script或style中缩进。缩进头部和所有其他元素。一次缩进四个空格。不要使用tab或混合标签和空格进行缩进。
```html
&lt;!-- Good --&gt;
&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;
    &lt;title&gt;Sample Page&lt;/title&gt;

    &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot;&gt;
    &lt;style&gt;
    body {
        font-size: 100em;
    }
    &lt;/style&gt;

    &lt;script src=&quot;/jquery.js&quot;&gt;&lt;/script&gt;
    &lt;script&gt;
    $(function() {
        $( &quot;p&quot; ).text( $.fn.jquery );
    });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;p&gt;CISS! is awesome!&lt;p&gt;

&lt;/body&gt;
&lt;/html&gt;
```
Trailing Whitespace

Remove trailing white spaces. Trailing white spaces are unnecessary and can complicate diffs.
删除尾随的空格。
```html
&lt;!-- Good --&gt;
&lt;p&gt;Yes please.&lt;/p&gt;

&lt;!-- Bad --&gt;
&lt;p&gt;No, thank you. &lt;/p&gt;
```

Inline CSS

Inline CSS must be avoided. When altering states using JavaScript, use CSS to define your states, and only use on obtrusive JavaScript to alter class names whenever possible.

必须避免内联CSS。当使用JavaScript更改状态时，请使用CSS来定义您的状态。
React 除外。

```html
&lt;!-- Good --&gt;
&lt;a class=&quot;is-link-disabled&quot; href=&quot;//index.php&quot;&gt;Home&lt;/a&gt;

&lt;!-- Bad --&gt;
&lt;a href=&quot;//index.php&quot; style=&quot;text-decoration: line-through;&quot;&gt;Home&lt;/a&gt;
```


Style Attributes

You should not use border, align, valign, or clear attributes. Avoid use of style attributes, except where using syndicated content or internal syndicating systems.

Semantics

Use HTML according to its purpose. For example, use heading elements for headings, p elements for paragraphs, a elements for anchors, etc.
使用合适的语义标签，根据目的使用HTML。

Using HTML according to its purpose is important for accessibility, reuse, and code efficiency reasons.
根据其目的使用HTML对于可访问性，重用和代码效率很重要。

```html
&lt;!-- Good --&gt;
&lt;a href=&quot;subscriptions/&quot;&gt;View subscriptions&lt;/a&gt;

&lt;!-- Bad --&gt;
&lt;div onclick=&quot;goToSubscriptions();&quot;&gt;View subscriptions&lt;/div&gt;
```
Markup

Image Tags

Image elements () must have an alt attribute. Height and width attributes are optional and may be omitted.
Image elements（）必须具有alt属性。高度和宽度属性是可选的，可以省略。

Comments
在标签结尾标明对应的开始标签
```html
&lt;div class=&quot;parent&quot;&gt;

    &lt;div class=&quot;child&quot;&gt;
    &lt;/div&gt;&lt;!-- /child --&gt;

&lt;/div&gt;&lt;!-- /parent --&gt;
```
Mark todos

Highlight todos by using the keyword TODO, eg:
使用 TODO标明代办办事件
```html
&lt;!-- TODO: add active item class --&gt;
&lt;ul&gt;
  &lt;li&gt;Home&lt;/li&gt;
  &lt;li&gt;Blog&lt;/li&gt;
&lt;/ul&gt;
```
Adding line breaks

Always use &lt;br /&gt; instead of &lt;br&gt; and &lt;br/&gt;
始终使用&lt;br /&gt; 而不是&lt;br&gt; 或 &lt;br/&gt;</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">How to do a redirect to another route programmatically with react Router v4</title><link href="http://localhost:4000/How-to-do-a-redirect-to-another-route-programmatically-with-react-router-v4/" rel="alternate" type="text/html" title="How to do a redirect to another route programmatically with react Router v4" /><published>2017-08-30T00:00:00+08:00</published><updated>2017-08-30T00:00:00+08:00</updated><id>http://localhost:4000/How%20to%20do%20a%20redirect%20to%20another%20route%20programmatically%20with%20react-router%20v4</id><content type="html" xml:base="http://localhost:4000/How-to-do-a-redirect-to-another-route-programmatically-with-react-router-v4/">### How to do a redirect to another route programmatically with react-router v4.


#### Header.js
#### first of all just import withRouter, with this,You can get access to the history object’s properties and the closest &lt;Route&gt;'s match via the withRouter higher-order component. withRouter will re-render its component every time the route changes with the same props as &lt;Route&gt; render props: { match, location, history }.

``` js
// ....
import { withRouter } from 'react-router'

class Header extends Component {
  functionMethod() {
    // then push you path into history.
    this.props.history.push( &quot;/path&quot;);
  }
  // ...
}

// export component by invoke withRouter.
export default withRouter(Header);
```

#### And for Navigator which normally used as public component and it not rendered by &lt;Route&gt;&lt;/Route&gt; you need use createBrowserHistory to create history object for it. Consider following example.


``` js
//Routers.js

import { createBrowserHistory } from 'history';
// import createBrowserHistory to create react history object for header component
const history = createBrowserHistory();
// ...
class Routers extends Component{
  render(){
    return (

    &lt;BrowserRouter  basename=&quot;/platform&quot;&gt;
      &lt;div&gt;
        &lt;Header history={history}&gt;&lt;/Header&gt;
        // set history as Header.js's props without createBrowserHistory you will not able to access history here.

        &lt;Switch&gt;
            &lt;Route
                path={&quot;/bom&quot;}
                children={({history}) =&gt; (
                  &lt;Bom history={history}&gt;&lt;/Bom&gt;
                )}
            &gt;
            &lt;/Route&gt;
            // ....
            &lt;/Switch&gt;
            &lt;/div&gt;
        &lt;/BrowserRouter&gt;
    )
  }
}
// ...
export default Routers;

```</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">Set Welcom Info For Centos</title><link href="http://localhost:4000/set-Welcom-info-for-CentOS/" rel="alternate" type="text/html" title="Set Welcom Info For Centos" /><published>2017-05-25T00:00:00+08:00</published><updated>2017-05-25T00:00:00+08:00</updated><id>http://localhost:4000/set-Welcom-info-for-CentOS</id><content type="html" xml:base="http://localhost:4000/set-Welcom-info-for-CentOS/">### set Welcom info for centos

```bash
$ vim /etc/motd
```
input something use full such as where is your application directory is.</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">Set Existsing Folder Point To Remote Git</title><link href="http://localhost:4000/set-existsing-folder-point-to-remote-git/" rel="alternate" type="text/html" title="Set Existsing Folder Point To Remote Git" /><published>2017-04-20T00:00:00+08:00</published><updated>2017-04-20T00:00:00+08:00</updated><id>http://localhost:4000/set-existsing-folder-point-to-remote-git</id><content type="html" xml:base="http://localhost:4000/set-existsing-folder-point-to-remote-git/"># set-existsing-folder-point-to-remote-git

``` bash
1. $ git init

2. $ git remote add origin https://github.com/xxx/xxx.git

3. $ git branch --set-upstream-to=origin/&lt;branch&gt; master

4. $ git pull --allow-unrelated-histories
```
**watch out** here's needs https:// not ssh, in case you don't have the SSH keys. but you can also use ssh if you'd prefer.

In my case, error was just `fatal: refusing to merge unrelated histories` on every especially first pull request after remotely adding a git repo.
Using `--allow-unrelated-histories` flag worked with pull request in this way</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry><entry><title type="html">Use Nodejs Server To Serve &amp;amp; Test React App On Centos 6</title><link href="http://localhost:4000/use-nodejs-server-to-serve-&-test-react-app-on-centos-6/" rel="alternate" type="text/html" title="Use Nodejs Server To Serve &amp; Test React App On Centos 6" /><published>2017-04-19T00:00:00+08:00</published><updated>2017-04-19T00:00:00+08:00</updated><id>http://localhost:4000/use-nodejs-server-to-serve-&amp;-test-react-app-on-centos-6</id><content type="html" xml:base="http://localhost:4000/use-nodejs-server-to-serve-&amp;-test-react-app-on-centos-6/">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/
https://expressjs.com/en/starter/installing.html

### 1. Download Node.js

You will want to download the latest stable version of Node.js, which can be done by running the command below. It runs a script that automatically steps you through the installation process. The script is downloaded directly from Joylent (the makers of Node.js) at their NodeSource repository.

``` {r, engine='', count_lines}
 cd /tmp  
 curl -sL https://rpm.nodesource.com/setup | bash -
 ```
notice here need update url flowing the instruction.

### 2. Install Node.js

Once the script detects that you do not have Node.js installed, enter the following command to begin the install via the yum package manager.

 yum install -y nodejs</content><author><name>William Vit</name><email>vitalitymailg@gmail.com</email></author><category term="CSS" /><category term="JS" /><category term="HTML" /></entry></feed>